// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Gender {
  male
  female
}

model User {
  id                   String         @id
  userName             String         @unique
  displayName          String
  email                String?        @unique
  passwordHash         String?
  googleId             String?        @unique
  avatarUrl            String?
  bio                  String?
  gender               Gender?
  // DateOfBirth  DateTime
  session              Session[]
  posts                Post[]
  following            Follow[]       @relation("Following")
  followers            Follow[]       @relation("Followers")
  likes                Like[]
  bookmarks            Bookmark[]
  comments             Comment[]
  receiveNotifications Notification[] @relation("Recipient")
  isSuedNotifications  Notification[] @relation("IsSuer")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @default(now()) @updatedAt

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("sessions")
}

model Post {
  id                 String         @id @default(cuid())
  content            String
  userId             String
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments        Media[]
  likes              Like[]
  comments           Comment[]
  bookmarks          Bookmark[]
  likedNotifications Notification[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt

  @@map("posts")
}

model Follow {
  followerId  String
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@unique([followerId, followingId])
  @@map("follows")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("post_media")
}

model Like {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("comments")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  isSuerId    String
  isSuer      User             @relation("IsSuer", fields: [isSuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt

  @@map("notifications")
}
